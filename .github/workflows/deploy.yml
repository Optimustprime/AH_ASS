name: Deploy to Azure

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Install Java for Spark
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Configure Spark environment
        run: |
          # Set up Hadoop winutils alternative for Linux
          mkdir -p hadoop/bin
          echo '#!/bin/bash' > hadoop/bin/winutils
          chmod +x hadoop/bin/winutils
          export HADOOP_HOME=$(pwd)/hadoop

      - name: Run tests
        run: |
          cd ad-marketing-pipeline
          poetry run pytest tests/ -v
        env:
          HADOOP_HOME: ${{ github.workspace }}/hadoop
          PYSPARK_SUBMIT_ARGS: "--conf spark.driver.memory=2g pyspark-shell"

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}


      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/django-app:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          cd infra
          terraform init


      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -generate-config-out=generated.tf
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_event_hub_connection_string: ${{ secrets.EVENT_HUB_CONNECTION_STRING }}
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_event_hub_connection_string: ${{ secrets.EVENT_HUB_CONNECTION_STRING }}
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}